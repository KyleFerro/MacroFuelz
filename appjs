// MacroFuel - Nutrition Tracker JavaScript

// Global variables
let dailyData = {
  consumed: {
    calories: 0,
    protein: 0,
    carbs: 0,
    fats: 0
  },
  goals: {
    calories: 2000,
    protein: 150,
    carbs: 250,
    fats: 67
  },
  meals: []
};

// Store all daily data, keyed by date string (YYYY-MM-DD)
let allDailyData = {};

let currentMonth = new Date().getMonth();
let currentYear = new Date().getFullYear();

// Check if localStorage is available
const isLocalStorageAvailable = (() => {
  try {
    const test = '__localStorage_test__';
    localStorage.setItem(test, test);
    localStorage.removeItem(test);
    return true;
  } catch (e) {
    return false;
  }
})();

// Functions called on ALL pages to maintain consistent header/sidebar
document.addEventListener('DOMContentLoaded', function() {
  loadAllData(); // Load all historical data first
  loadDailyDataForToday(); // Then, load data for the current day into 'dailyData'
  
  // Set active navigation tab based on current page
  setActiveNavTab();

  // Only update daily tracker specific elements if on index.html
  if (document.getElementById('tracker')) {
    updateDisplay(); // Updates calories, macros, and meals list
  }
  
  updateQuickStats(); // Update quick stats from any page
  
  // Initialize monthly checklist if on that page
  if (document.querySelector('.checklist-grid')) {
    displayMonthlyChecklist(currentMonth, currentYear);
  }

  // Initialize day result if on that page
  if (document.getElementById('dayResultDisplay')) {
    const urlParams = new URLSearchParams(window.location.search);
    const date = urlParams.get('date');
    if (date) {
      displayDayResult(date);
    }
  }
});

// Sidebar functions
function toggleSidebar() {
  const sidebar = document.getElementById('sidebar');
  const overlay = document.getElementById('overlay');
  if (sidebar && overlay) {
    sidebar.classList.toggle('active');
    overlay.style.display = sidebar.classList.contains('active') ? 'block' : 'none';
  }
}

// Sets the active class on the correct navigation tab
function setActiveNavTab() {
  const path = window.location.pathname;
  const page = path.split('/').pop(); // Gets 'index.html', 'monthly-checklist.html', 'day-result.html' etc.

  // Remove active from all static tabs first
  document.querySelectorAll('.nav-tab').forEach(tab => {
    tab.classList.remove('active');
  });

  // Hide the dynamic day-chosen tab by default
  const navDayChosen = document.getElementById('navDayChosen');
  if (navDayChosen) {
    navDayChosen.style.display = 'none';
  }

  // Set active for the current page's tab
  if (page === 'index.html' || page === '') { // '' for root domain
    const dailyTrackerTab = document.getElementById('navDailyTracker');
    if (dailyTrackerTab) dailyTrackerTab.classList.add('active');
  } else if (page === 'monthly-checklist.html') {
    const monthlyProgressTab = document.getElementById('navMonthlyProgress');
    if (monthlyProgressTab) monthlyProgressTab.classList.add('active');
  } 
  // The 'day-chosen' tab is handled directly by displayDayResult if on that page
}


// Settings Panel functions
function toggleSettingsPanel() {
  const settingsPanel = document.getElementById('settingsPanel');
  if (!settingsPanel) return;

  settingsPanel.classList.toggle('active'); // Toggle visibility

  // If panel is active, populate input fields with current goals
  if (settingsPanel.classList.contains('active')) {
    document.getElementById('goalCalories').value = dailyData.goals.calories;
    document.getElementById('goalProtein').value = dailyData.goals.protein;
    document.getElementById('goalCarbs').value = dailyData.goals.carbs;
    document.getElementById('goalFats').value = dailyData.goals.fats;
  }
}

function setDailyGoals() {
  const goalCaloriesInput = document.getElementById('goalCalories');
  const goalProteinInput = document.getElementById('goalProtein');
  const goalCarbsInput = document.getElementById('goalCarbs');
  const goalFatsInput = document.getElementById('goalFats');

  if (!goalCaloriesInput || !goalProteinInput || !goalCarbsInput || !goalFatsInput) {
    console.error('Cannot find all goal input fields.');
    return;
  }

  const newCalories = parseFloat(goalCaloriesInput.value) || 0;
  const newProtein = parseFloat(goalProteinInput.value) || 0;
  const newCarbs = parseFloat(goalCarbsInput.value) || 0;
  const newFats = parseFloat(goalFatsInput.value) || 0;

  if (newCalories <= 0 || newProtein <= 0 || newCarbs <= 0 || newFats <= 0) {
    alert('Please enter valid positive numbers for all goals.');
    return;
  }

  dailyData.goals.calories = newCalories;
  dailyData.goals.protein = newProtein;
  dailyData.goals.carbs = newCarbs;
  dailyData.goals.fats = newFats;

  saveDailyDataForToday(); // Save the updated goals for the current day
  updateDisplay(); // Refresh the display
  showNotification('Daily goals updated!');
  toggleSettingsPanel(); // Optionally hide the panel after saving
}


// Food management functions (primarily for index.html)
function addFood() {
  const foodNameInput = document.getElementById('foodName');
  const caloriesInput = document.getElementById('calories');
  const proteinInput = document.getElementById('protein');
  const carbsInput = document.getElementById('carbs');
  const fatsInput = document.getElementById('fats');
  
  if (!foodNameInput || !caloriesInput || !proteinInput || !carbsInput || !fatsInput) {
    console.error('Cannot find all form inputs. This function might be called on the wrong page.');
    return;
  }
  
  const foodName = foodNameInput.value.trim();
  const calories = parseFloat(caloriesInput.value) || 0;
  const protein = parseFloat(proteinInput.value) || 0;
  const carbs = parseFloat(carbsInput.value) || 0;
  const fats = parseFloat(fatsInput.value) || 0;
  
  if (!foodName) {
    alert('Please enter a food name');
    return;
  }
  
  if (calories <= 0 && (protein <= 0 && carbs <= 0 && fats <= 0)) {
    alert('Please enter valid calories or at least one macro value');
    return;
  }
  
  const meal = {
    id: Date.now(),
    name: foodName,
    calories: calories,
    protein: protein,
    carbs: carbs,
    fats: fats,
    timestamp: new Date().toISOString()
  };
  
  dailyData.meals.push(meal);
  
  dailyData.consumed.calories += calories;
  dailyData.consumed.protein += protein;
  dailyData.consumed.carbs += carbs;
  dailyData.consumed.fats += fats;
  
  saveDailyDataForToday(); // Save today's data specifically
  updateDisplay();
  clearForm();
  
  showNotification('Food added successfully!');
}

function deleteFood(mealId) {
  const mealIndex = dailyData.meals.findIndex(meal => meal.id === mealId);
  if (mealIndex === -1) return;
  
  const meal = dailyData.meals[mealIndex];
  
  dailyData.consumed.calories -= meal.calories;
  dailyData.consumed.protein -= meal.protein;
  dailyData.consumed.carbs -= meal.carbs;
  dailyData.consumed.fats -= meal.fats;
  
  dailyData.meals.splice(mealIndex, 1);
  
  saveDailyDataForToday(); // Save today's data specifically
  updateDisplay();
  
  showNotification('Food removed successfully!');
}

function clearForm() {
  const foodNameInput = document.getElementById('foodName');
  const caloriesInput = document.getElementById('calories');
  const proteinInput = document.getElementById('protein');
  const carbsInput = document.getElementById('carbs');
  const fatsInput = document.getElementById('fats');

  if(foodNameInput) foodNameInput.value = '';
  if(caloriesInput) caloriesInput.value = '';
  if(proteinInput) proteinInput.value = '';
  if(carbsInput) carbsInput.value = '';
  if(fatsInput) fatsInput.value = '';
}

function clearAllMeals() {
  // Reset consumed values and meals, but keep goals as they are set
  dailyData.consumed = { calories: 0, protein: 0, carbs: 0, fats: 0 };
  dailyData.meals = [];
  saveDailyDataForToday();
  updateDisplay();
  showNotification('All meals cleared for today!');
}

// Display update functions (primarily for index.html)
function updateDisplay() {
  updateCaloriesDisplay();
  updateMacrosDisplay();
  updateMealsList();
  updateQuickStats(); // Ensures quick stats in header are always current
  updateSummaryStats();
}

function updateCaloriesDisplay() {
  const consumedEl = document.getElementById('consumedCalories');
  const goalEl = document.getElementById('calorieGoal');
  const remainingEl = document.getElementById('remainingCalories');

  if (consumedEl && goalEl && remainingEl) {
    const consumed = Math.round(dailyData.consumed.calories);
    const goal = dailyData.goals.calories;
    const remaining = Math.max(0, goal - consumed);
    
    consumedEl.textContent = consumed;
    goalEl.textContent = goal;
    remainingEl.textContent = remaining;
  }
}

function updateMacrosDisplay() {
  const macros = ['protein', 'carbs', 'fats'];
  macros.forEach(macro => {
    const consumedEl = document.getElementById(`consumed${macro.charAt(0).toUpperCase() + macro.slice(1)}`);
    const remainingEl = document.getElementById(`remaining${macro.charAt(0).toUpperCase() + macro.slice(1)}`);
    const progressEl = document.getElementById(`${macro}Progress`);

    if (consumedEl && remainingEl && progressEl) {
      const consumed = Math.round(dailyData.consumed[macro]);
      const goal = dailyData.goals[macro];
      const remaining = Math.max(0, goal - consumed);
      const progress = Math.min(100, (consumed / goal) * 100);
      
      consumedEl.textContent = consumed;
      remainingEl.textContent = remaining;
      progressEl.style.width = progress + '%';
    }
  });
}

function updateMealsList() {
  const mealsList = document.getElementById('mealsList'); // Corrected ID to match HTML
  if (!mealsList) return;
  
  if (dailyData.meals.length === 0) {
    mealsList.innerHTML = `
      <div class="empty-state">
        <p>No meals added yet</p>
        <p>Add your first meal using the form on the right!</p>
      </div>
    `;
  } else {
    mealsList.innerHTML = dailyData.meals.map(meal => `
      <div class="meal-item">
        <div class="meal-info">
          <div class="meal-name">${meal.name}</div>
          <div class="meal-macros">
            P: <span class="macro-protein">${Math.round(meal.protein)}g</span> • C: <span class="macro-carbs">${Math.round(meal.carbs)}g</span> • F: <span class="macro-fats">${Math.round(meal.fats)}g</span>
          </div>
        </div>
        <div class="meal-calories">${Math.round(meal.calories)} cal</div>
        <button class="delete-btn" onclick="deleteFood(${meal.id})">Delete</button>
      </div>
    `).join('');
  }
}

function updateQuickStats() {
  // Ensure we're working with the current day's data for quick stats
  // This is called after loadDailyDataForToday() on DOMContentLoaded
  const totalMeals = dailyData.meals.length;
  const calorieProgress = dailyData.goals.calories > 0 ? Math.round((dailyData.consumed.calories / dailyData.goals.calories) * 100) : 0;
  const streakDays = calculateStreak();
  
  const totalMealsEl = document.getElementById('totalMeals');
  const calorieProgressEl = document.getElementById('calorieProgress');
  const streakDaysEl = document.getElementById('streakDays');

  if (totalMealsEl) totalMealsEl.textContent = totalMeals;
  // Handle NaN if calorieGoal is 0 or undefined
  if (calorieProgressEl) calorieProgressEl.textContent = (isNaN(calorieProgress) || !isFinite(calorieProgress) ? 0 : calorieProgress) + '%';
  if (streakDaysEl) streakDaysEl.textContent = streakDays;
}

function updateSummaryStats() {
  const summaryCaloriesEl = document.getElementById('summaryCalories');
  const summaryProteinEl = document.getElementById('summaryProtein');
  const summaryCarbsEl = document.getElementById('summaryCarbs');
  const summaryFatsEl = document.getElementById('summaryFats');

  // These elements are only on day-result.html, so check for existence
  if (summaryCaloriesEl) summaryCaloriesEl.textContent = Math.round(dailyData.consumed.calories);
  if (summaryProteinEl) summaryProteinEl.textContent = Math.round(dailyData.consumed.protein) + 'g';
  if (summaryCarbsEl) summaryCarbsEl.textContent = Math.round(dailyData.consumed.carbs) + 'g';
  if (summaryFatsEl) summaryFatsEl.textContent = Math.round(dailyData.consumed.fats) + 'g';
}


// Monthly Progress and Day Result functions (primarily for monthly-checklist.html and day-result.html)
function getDaysInMonth(year, month) {
  return new Date(year, month + 1, 0).getDate();
}

function formatYYYYMMDD(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

function displayMonthlyChecklist(month, year) {
  const checklistGrid = document.querySelector('.checklist-grid');
  const currentMonthYearEl = document.getElementById('currentMonthYear');
  if (!checklistGrid || !currentMonthYearEl) return;

  currentMonthYearEl.textContent = new Date(year, month).toLocaleString('en-US', { month: 'long', year: 'numeric' });
  checklistGrid.innerHTML = '';
  
  const daysInMonth = getDaysInMonth(year, month);
  
  for (let i = 1; i <= daysInMonth; i++) {
    const date = new Date(year, month, i);
    const dateKey = formatYYYYMMDD(date);
    
    // Check if data exists for this day and if calorie goal was met (or if a flag exists)
    const dayDataForChecklist = allDailyData[dateKey]; // Use allDailyData here
    // Consider goal met if consumed calories >= goal calories AND goal is not 0 (to avoid false positives for unset goals)
    const isChecked = dayDataForChecklist ? (dayDataForChecklist.consumed.calories >= dayDataForChecklist.goals.calories && dayDataForChecklist.goals.calories > 0) : false;

    // Direct link to day-result.html with date parameter
    const dayDiv = document.createElement('div');
    dayDiv.className = 'day-checkbox';
    dayDiv.innerHTML = `
      <input type="checkbox" id="day${i}" data-date="${dateKey}" ${isChecked ? 'checked' : ''} disabled>
      <label for="day${i}" onclick="window.location.href='day-result.html?date=${dateKey}'">${i}</label>
    `;
    checklistGrid.appendChild(dayDiv);
  }
}

function changeMonth(delta) {
  currentMonth += delta;
  if (currentMonth > 11) {
    currentMonth = 0;
    currentYear++;
  } else if (currentMonth < 0) {
    currentMonth = 11;
    currentYear--;
  }
  displayMonthlyChecklist(currentMonth, currentYear);
}

function displayDayResult(dateKey) {
  const dayDataToDisplay = allDailyData[dateKey] || { // Use allDailyData here
    consumed: { calories: 0, protein: 0, carbs: 0, fats: 0 },
    goals: { calories: 2000, protein: 150, carbs: 250, fats: 67 }, // Default goals for display if no data
    meals: []
  };

  const resultDateEl = document.getElementById('resultDate');
  const resultCaloriesEl = document.getElementById('resultCalories');
  const resultProteinEl = document.getElementById('resultProtein');
  const resultCarbsEl = document.getElementById('resultCarbs');
  const resultFatsEl = document.getElementById('resultFats');
  const aiSuggestedMealsEl = document.getElementById('aiSuggestedMeals');
  const resultMealsListEl = document.getElementById('resultMealsList');
  const navDayChosen = document.getElementById('navDayChosen'); // Get the dynamic tab element

  if (!resultDateEl || !resultCaloriesEl || !resultProteinEl || !resultCarbsEl || !resultFatsEl || !aiSuggestedMealsEl || !resultMealsListEl || !navDayChosen) {
    console.error('Missing elements for day result display or dynamic navigation tab.');
    return;
  }

  const displayDate = new Date(dateKey + 'T00:00:00'); // Ensure correct date interpretation
  resultDateEl.textContent = displayDate.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
  resultCaloriesEl.textContent = Math.round(dayDataToDisplay.consumed.calories);
  resultProteinEl.textContent = Math.round(dayDataToDisplay.consumed.protein) + 'g';
  resultCarbsEl.textContent = Math.round(dayDataToDisplay.consumed.carbs) + 'g';
  resultFatsEl.textContent = Math.round(dayDataToDisplay.consumed.fats) + 'g';

  // AI Suggestion Logic
  const caloriesMet = dayDataToDisplay.goals.calories > 0 && dayDataToDisplay.consumed.calories >= dayDataToDisplay.goals.calories;
  const proteinMet = dayDataToDisplay.goals.protein > 0 && dayDataToDisplay.consumed.protein >= dayDataToDisplay.goals.protein;
  const carbsMet = dayDataToDisplay.goals.carbs > 0 && dayDataToDisplay.consumed.carbs >= dayDataToDisplay.goals.carbs;
  const fatsMet = dayDataToDisplay.goals.fats > 0 && dayDataToDisplay.consumed.fats >= dayDataToDisplay.goals.fats;

  let aiSuggestion = "";
  if (caloriesMet && proteinMet && carbsMet && fatsMet) {
    aiSuggestion = "Great job! You hit all your calorie and macro goals for the day!";
  } else if (dayDataToDisplay.goals.calories === 0 && dayDataToDisplay.goals.protein === 0 && dayDataToDisplay.goals.carbs === 0 && dayDataToDisplay.goals.fats === 0) {
    aiSuggestion = "No goals set for this day. Set your daily goals on the Daily Tracker page to get feedback!";
  }
  else {
    const missingCalories = Math.max(0, dayDataToDisplay.goals.calories - dayDataToDisplay.consumed.calories);
    const missingProtein = Math.max(0, dayDataToDisplay.goals.protein - dayDataToDisplay.consumed.protein);
    const missingCarbs = Math.max(0, dayDataToDisplay.goals.carbs - dayDataToDisplay.consumed.carbs);
    const missingFats = Math.max(0, dayDataToDisplay.goals.fats - dayDataToDisplay.consumed.fats);

    let suggestions = [];
    if (missingCalories > 0) suggestions.push(`${Math.round(missingCalories)} calories`);
    if (missingProtein > 0) suggestions.push(`${Math.round(missingProtein)}g protein`);
    if (missingCarbs > 0) suggestions.push(`${Math.round(missingCarbs)}g carbs`);
    if (missingFats > 0) suggestions.push(`${Math.round(missingFats)}g fats`);

    if (suggestions.length > 0) {
      aiSuggestion = `You were missing ${suggestions.join(', ')}. Consider adding more nutrient-dense foods next time!`;
    } else {
      aiSuggestion = "Looks like you hit your goals or went slightly over. Keep up the good work!";
    }
  }
  aiSuggestedMealsEl.textContent = aiSuggestion;

  let mealsHtml = '';
  if (dayDataToDisplay.meals.length === 0) {
    mealsHtml = `
      <div class="empty-state">
        <p>No meals recorded for this day.</p>
      </div>
    `;
  } else {
    mealsHtml = dayDataToDisplay.meals.map((meal, index) => `
      <div class="meal-item">
        <div class="meal-info">
          <div class="meal-name">${meal.name}</div>
          <div class="meal-macros">
            P: <span class="macro-protein">${Math.round(meal.protein)}g</span> • C: <span class="macro-carbs">${Math.round(meal.carbs)}g</span> • F: <span class="macro-fats">${Math.round(meal.fats)}g</span>
          </div>
        </div>
        <div class="meal-calories">${Math.round(meal.calories)} cal</div>
      </div>
    `).join('');
  }
  resultMealsListEl.innerHTML = mealsHtml;

  // Set active state for the dynamic day-chosen tab
  document.querySelectorAll('.nav-tab').forEach(tab => tab.classList.remove('active')); // Clear all active states
  navDayChosen.textContent = displayDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }); // Shorter date for tab
  navDayChosen.style.display = 'block'; // Make it visible
  navDayChosen.classList.add('active'); // Set it as active
  navDayChosen.href = `day-result.html?date=${dateKey}`; // Ensure it links back to itself (useful if navigated away and then back)
}


function calculateStreak() {
  let streak = 0;
  let currentDate = new Date();
  
  // Go back day by day to calculate streak
  for (let i = 0; i < 365; i++) { // Check up to a year back
    const checkDate = new Date(currentDate);
    checkDate.setDate(currentDate.getDate() - i);
    const dateKey = formatYYYYMMDD(checkDate);

    const dayDataForStreak = allDailyData[dateKey];
    // Streak only counts if goals are set AND met
    const isGoalMet = dayDataForStreak && dayDataForStreak.goals.calories > 0 && dayDataForStreak.consumed.calories >= dayDataForStreak.goals.calories;

    if (i === 0) { // For the current day
      if (isGoalMet) {
        streak++;
      } else {
        // If today's goal is not met (or not set), but there's data for today, streak is 0
        // If no data for today, then check yesterday for streak
        if (dayDataForStreak) { // If data exists but goal isn't met or isn't set
          streak = 0;
          break; 
        }
      }
    } else { // For past days
      if (isGoalMet) {
        streak++;
      } else {
        break; // Streak breaks if a previous day's goal was not met or not set
      }
    }
  }
  return streak;
}


// Data persistence functions
function getCurrentDateKey() {
  return formatYYYYMMDD(new Date());
}

function saveAllData() {
  if (!isLocalStorageAvailable) return;
  try {
    localStorage.setItem('allDailyData', JSON.stringify(allDailyData));
    showNotification('Data saved successfully!');
  } catch (e) {
    console.error("Error saving data to localStorage: ", e);
    showNotification('Failed to save data. Storage might be full.');
  }
}

function loadAllData() {
  if (!isLocalStorageAvailable) return;
  const savedAllData = localStorage.getItem('allDailyData');
  if (savedAllData) {
    try {
      allDailyData = JSON.parse(savedAllData);
    } catch (e) {
      console.error("Error parsing saved data from localStorage: ", e);
      allDailyData = {}; // Reset if data is corrupted
    }
  }
  _migrateLegacyDailyData(); // Attempt to migrate old single-day data
}

// Attempts to migrate old 'dailyData' key to the new 'allDailyData' structure
function _migrateLegacyDailyData() {
  if (!isLocalStorageAvailable) return;
  const legacyDailyDataString = localStorage.getItem('dailyData');
  if (legacyDailyDataString) {
    try {
      const legacyDailyData = JSON.parse(legacyDailyDataString);
      const todayKey = getCurrentDateKey();
      // Only migrate if no data already exists for today in the new structure
      if (!allDailyData[todayKey]) {
        allDailyData[todayKey] = legacyDailyData;
        saveAllData(); // Save the newly migrated data
        localStorage.removeItem('dailyData'); // Remove the old key
        console.log("Migrated legacy 'dailyData' to new 'allDailyData' structure.");
      }
    } catch (e) {
      console.error("Error migrating legacy dailyData: ", e);
    }
  }
}

function saveDailyDataForToday() {
  const dateKey = getCurrentDateKey();
  allDailyData[dateKey] = dailyData; // Save the current dailyData object
  saveAllData(); // Save the entire allDailyData object to localStorage
}

function loadDailyDataForToday() {
  const dateKey = getCurrentDateKey();
  if (allDailyData[dateKey]) {
    // Deep copy to ensure we don't modify the stored object directly unless intended
    dailyData = JSON.parse(JSON.stringify(allDailyData[dateKey])); 
  } else {
    // If no data for today, initialize with default goals and empty meals
    dailyData = {
      consumed: { calories: 0, protein: 0, carbs: 0, fats: 0 },
      goals: { calories: 2000, protein: 150, carbs: 250, fats: 67 }, // Default goals for a new day
      meals: []
    };
  }
}

// Utility functions
function showNotification(message) {
  const notification = document.createElement('div');
  notification.className = 'notification';
  notification.textContent = message;
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #48bb78;
    color: white;
    padding: 12px 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    font-weight: 600;
    font-size: 14px;
    transform: translateX(100%);
    transition: transform 0.3s ease;
  `;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.style.transform = 'translateX(0)';
  }, 100);
  
  setTimeout(() => {
    notification.style.transform = 'translateX(100%)';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 3000);
}

// Auto-save functionality for the current day's data
if (isLocalStorageAvailable) {
  setInterval(saveDailyDataForToday, 30000); // Save current day's data every 30 seconds
}

// Handle form submission with Enter key (only relevant on index.html)
document.addEventListener('keypress', function(e) {
  if (e.key === 'Enter' && e.target.tagName === 'INPUT') {
    const foodForm = e.target.closest('.add-food-form');
    if (foodForm) {
      addFood();
      return; // Prevent further processing if addFood was called
    }
    const settingsForm = e.target.closest('.settings-panel');
    if (settingsForm) {
      setDailyGoals();
      return; // Prevent further processing if setDailyGoals was called
    }
  }
});

// Make functions globally available
window.addFood = addFood;
window.deleteFood = deleteFood;
window.clearAllMeals = clearAllMeals;
window.saveDailyDataForToday = saveDailyDataForToday;
window.toggleSidebar = toggleSidebar;
window.changeMonth = changeMonth;
window.displayDayResult = displayDayResult; // Used by day-result.html
window.displayMonthlyChecklist = displayMonthlyChecklist; // Used by monthly-checklist.html
window.loadAllData = loadAllData;
window.loadDailyDataForToday = loadDailyDataForToday;
window.updateDisplay = updateDisplay; // For index.html
window.updateQuickStats = updateQuickStats; // For all pages
window.toggleSettingsPanel = toggleSettingsPanel; // New global function
window.setDailyGoals = setDailyGoals; // New global function
window.setActiveNavTab = setActiveNavTab; // New global function for tab highlighting
